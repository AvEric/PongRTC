{"ts":1354571067210,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"//SERVER\nvar WebSocketServer = require('ws').Server\n\nvar iolog = function() {};\n\nfor (var i = 0; i < process.argv.length; i++) {\n  var arg = process.argv[i];\n  if (arg === \"-debug\") {\n    iolog = function(msg) {\n      console.log(msg)\n    }\n    console.log('Debug mode on!');\n  }\n}\n\n\n// Used for callback publish and subscribe\nif (typeof rtc === \"undefined\") {\n  var rtc = {};\n}\n//Array to store connections\nrtc.sockets = [];\n\nrtc.rooms = {};\n\n// Holds callbacks for certain events.\nrtc._events = {};\n\nrtc.on = function(eventName, callback) {\n  rtc._events[eventName] = rtc._events[eventName] || [];\n  rtc._events[eventName].push(callback);\n};\n\nrtc.fire = function(eventName, _) {\n  var events = rtc._events[eventName];\n  var args = Array.prototype.slice.call(arguments, 1);\n\n  if (!events) {\n    return;\n  }\n\n  for (var i = 0, len = events.length; i < len; i++) {\n    events[i].apply(null, args);\n  }\n};\n\nmodule.exports.listen = function(server) {\n  var manager;\n  if (typeof server === 'number') { \n    manager = new WebSocketServer({\n        port: server\n      });\n  } else {\n    manager = new WebSocketServer({\n      server: server\n    });\n  }\n\n  manager.rtc = rtc;\n  attachEvents(manager);\n  return manager;\n};\n\nfunction attachEvents(manager) {\n\n  manager.on('connection', function(socket) {\n    iolog('connect');\n\n    socket.id = id();\n    iolog('new socket got id: ' + socket.id);\n\n    rtc.sockets.push(socket);\n\n    socket.on('message', function(msg) {\n      var json = JSON.parse(msg);\n      rtc.fire(json.eventName, json.data, socket);\n    });\n\n    socket.on('close', function() {\n      iolog('close');\n\n      // find socket to remove\n      var i = rtc.sockets.indexOf(socket);\n      // remove socket\n      rtc.sockets.splice(i, 1);\n\n      // remove from rooms and send remove_peer_connected to all sockets in room\n      for (var key in rtc.rooms) {\n\n        var room = rtc.rooms[key];\n        var exist = room.indexOf(socket.id);\n\n        if (exist !== -1) {\n          room.splice(room.indexOf(socket.id), 1);\n          for (var j = 0; j < room.length; j++) {\n            console.log(room[j]);\n            var soc = rtc.getSocket(room[j]);\n            soc.send(JSON.stringify({\n              \"eventName\": \"remove_peer_connected\",\n              \"data\": {\n                \"socketId\": socket.id\n              }\n            }), function(error) {\n              if (error) {\n                console.log(error);\n              }\n            });\n          }\n          break;\n        }\n      }\n      // call the disconnect callback\n      rtc.fire('disconnect', rtc);\n\n    });\n\n    // call the connect callback\n    rtc.fire('connect', rtc);\n\n  });\n\n  // manages the built-in room functionality\n  rtc.on('join_room', function(data, socket) {\n    iolog('join_room');\n\n    var connectionsId = [];\n    var roomList = rtc.rooms[data.room] || [];\n\n    roomList.push(socket.id);\n    rtc.rooms[data.room] = roomList;\n\n\n    for (var i = 0; i < roomList.length; i++) {\n      var id = roomList[i];\n\n      if (id == socket.id) {\n        continue;\n      } else {\n\n        connectionsId.push(id);\n        var soc = rtc.getSocket(id);\n\n        // inform the peers that they have a new peer\n        if (soc) {\n          soc.send(JSON.stringify({\n            \"eventName\": \"new_peer_connected\",\n            \"data\":{\n              \"socketId\": socket.id\n            }\n          }), function(error) {\n            if (error) {\n              console.log(error);\n            }\n          });\n        }\n      }\n    }\n    // send new peer a list of all prior peers\n    socket.send(JSON.stringify({\n      \"eventName\": \"get_peers\",\n      \"data\": {\n        \"connections\": connectionsId\n      }\n    }), function(error) {\n      if (error) {\n        console.log(error);\n      }\n    });\n  });\n\n  //Receive ICE candidates and send to the correct socket\n  rtc.on('send_ice_candidate', function(data, socket) {\n    iolog('send_ice_candidate');\n    var soc = rtc.getSocket(data.socketId);\n\n    if (soc) {\n      soc.send(JSON.stringify({\n        \"eventName\": \"receive_ice_candidate\",\n        \"data\": {\n          \"label\": data.label,\n          \"candidate\": data.candidate,\n          \"socketId\": socket.id\n        }\n      }), function(error) {\n        if (error) {\n          console.log(error);\n        }\n      });\n\n      // call the 'recieve ICE candidate' callback\n      rtc.fire('receive ice candidate', rtc);\n    }\n  });\n\n  //Receive offer and send to correct socket\n  rtc.on('send_offer', function(data, socket) {\n    iolog('send_offer');\n    var soc = rtc.getSocket(data.socketId);\n\n    if (soc) {\n      soc.send(JSON.stringify({\n        \"eventName\": \"receive_offer\",\n        \"data\": {\n          \"sdp\": data.sdp,\n          \"socketId\": socket.id\n      }\n      }), function(error) {\n        if (error) {\n          console.log(error);\n        }\n      });\n    }\n    // call the 'send offer' callback\n    rtc.fire('send offer', rtc);\n  });\n\n  //Receive answer and send to correct socket\n  rtc.on('send_answer', function(data, socket) {\n    iolog('send_answer');\n    var soc = rtc.getSocket( data.socketId);\n\n    if (soc) {\n      soc.send(JSON.stringify({\n        \"eventName\": \"receive_answer\",\n        \"data\" : {\n          \"sdp\": data.sdp,\n          \"socketId\": socket.id\n        }\n      }), function(error) {\n        if (error) {\n          console.log(error);\n        }\n      });\n      rtc.fire('send answer', rtc);\n    }\n  });\n}\n\n// generate a 4 digit hex code randomly\n\n\nfunction S4() {\n  return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\n}\n\n// make a REALLY COMPLICATED AND RANDOM id, kudos to dennis\n\n\nfunction id() {\n  return (S4() + S4() + \"-\" + S4() + \"-\" + S4() + \"-\" + S4() + \"-\" + S4() + S4() + S4());\n}\n\nrtc.getSocket = function(id) {\n  var connections = rtc.sockets;\n  if (!connections) {\n    // TODO: Or error, or customize\n    return;\n  }\n\n  for (var i = 0; i < connections.length; i++) {\n    var socket = connections[i];\n    if (id === socket.id) {\n      return socket;\n    }\n  }\n}\n"]],"start1":0,"start2":0,"length1":0,"length2":5980}]],"length":5980}
{"contributors":[],"silentsave":true,"ts":1354577252727,"patch":[[{"diffs":[[0,"omList.push("],[1,"new s"],[0,"socket.id);\n"]],"start1":2848,"start2":2848,"length1":24,"length2":29}]],"length":5985,"saved":false}
{"ts":1354577254293,"patch":[[{"diffs":[[0,"sh(new s"],[1,"trinf"],[0,"socket.i"]],"start1":2857,"start2":2857,"length1":16,"length2":21}]],"length":5990,"saved":false}
{"ts":1354577255573,"patch":[[{"diffs":[[0,"ew strin"],[-1,"f"],[1,"g("],[0,"socket.i"]],"start1":2861,"start2":2861,"length1":17,"length2":18}]],"length":5991,"saved":false}
{"ts":1354577260201,"patch":[[{"diffs":[[0,"cket.id)"],[1,")"],[0,";\n    rt"]],"start1":2873,"start2":2873,"length1":16,"length2":17}]],"length":5992,"saved":false}
{"ts":1354577298001,"patch":[[{"diffs":[[0,"ush(new "],[-1,"s"],[1,"S"],[0,"tring(so"]],"start1":2856,"start2":2856,"length1":17,"length2":17}]],"length":5992,"saved":false}
{"ts":1354577316251,"patch":[[{"diffs":[[0,"ush("],[-1,"new String("],[0,"sock"]],"start1":2856,"start2":2856,"length1":19,"length2":8}]],"length":5981,"saved":false}
{"ts":1354577316950,"patch":[[{"diffs":[[0,"cket.id)"],[-1,")"],[0,";\n    rt"]],"start1":2862,"start2":2862,"length1":17,"length2":16}]],"length":5980,"saved":false}
{"ts":1354578137479,"patch":[[{"diffs":[[0,"onality\n"],[1,"  "],[0,"  rtc.on"]],"start1":2686,"start2":2686,"length1":16,"length2":18}]],"length":5982,"saved":false}
