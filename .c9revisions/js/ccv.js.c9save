{"ts":1354048468206,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":true,"ts":1354048488313,"patch":[[{"diffs":[[1,"/**\r\n * Viola-Jones-like face detection algorithm\r\n * Some explanation here: http://liuliu.me/eyes/javascript-face-detection-explained/\r\n *\r\n * @author Liu Liu / github.com/liuliu\r\n *\r\n * Copyright (c) 2010, Liu Liu\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\r\n *\r\n * * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\r\n * * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\r\n * * Neither the name of the authors nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n *\r\n */\r\n\r\nheadtrackr.ccv = {};\r\n\r\nheadtrackr.ccv.grayscale = function (canvas) {\r\n  /* detect_objects requires gray-scale image */\r\n  var ctx = canvas.getContext(\"2d\");\r\n  var imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\r\n  var data = imageData.data;\r\n  var pix1, pix2, pix = canvas.width * canvas.height * 4;\r\n  while (pix > 0)\r\n    data[pix -= 4] = data[pix1 = pix + 1] = data[pix2 = pix + 2] = (data[pix] * 0.3 + data[pix1] * 0.59 + data[pix2] * 0.11);\r\n  ctx.putImageData(imageData, 0, 0);\r\n  return canvas;\r\n};\r\n\r\nheadtrackr.ccv.array_group = function (seq, gfunc) {\r\n  var i, j;\r\n  var node = new Array(seq.length);\r\n  for (i = 0; i < seq.length; i++)\r\n    node[i] = {\"parent\" : -1,\r\n           \"element\" : seq[i],\r\n           \"rank\" : 0};\r\n  for (i = 0; i < seq.length; i++)\r\n  {\r\n    if (!node[i].element)\r\n      continue;\r\n    var root = i;\r\n    while (node[root].parent != -1)\r\n      root = node[root].parent;\r\n    for (j = 0; j < seq.length; j++)\r\n    {\r\n      if( i != j && node[j].element && gfunc(node[i].element, node[j].element))\r\n      {\r\n        var root2 = j;\r\n\r\n        while (node[root2].parent != -1)\r\n          root2 = node[root2].parent;\r\n\r\n        if(root2 != root)\r\n        {\r\n          if(node[root].rank > node[root2].rank)\r\n            node[root2].parent = root;\r\n          else\r\n          {\r\n            node[root].parent = root2;\r\n            if (node[root].rank == node[root2].rank)\r\n            node[root2].rank++;\r\n            root = root2;\r\n          }\r\n\r\n          /* compress path from node2 to the root: */\r\n          var temp, node2 = j;\r\n          while (node[node2].parent != -1)\r\n          {\r\n            temp = node2;\r\n            node2 = node[node2].parent;\r\n            node[temp].parent = root;\r\n          }\r\n\r\n          /* compress path from node to the root: */\r\n          node2 = i;\r\n          while (node[node2].parent != -1)\r\n          {\r\n            temp = node2;\r\n            node2 = node[node2].parent;\r\n            node[temp].parent = root;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  var idx = new Array(seq.length);\r\n  var class_idx = 0;\r\n  for(i = 0; i < seq.length; i++)\r\n  {\r\n    j = -1;\r\n    var node1 = i;\r\n    if(node[node1].element)\r\n    {\r\n      while (node[node1].parent != -1)\r\n        node1 = node[node1].parent;\r\n      if(node[node1].rank >= 0)\r\n        node[node1].rank = ~class_idx++;\r\n      j = ~node[node1].rank;\r\n    }\r\n    idx[i] = j;\r\n  }\r\n  return {\"index\" : idx, \"cat\" : class_idx};\r\n};\r\n\r\nheadtrackr.ccv.detect_objects = function (canvas, cascade, interval, min_neighbors) {\r\n  var scale = Math.pow(2, 1 / (interval + 1));\r\n  var next = interval + 1;\r\n  var scale_upto = Math.floor(Math.log(Math.min(cascade.width, cascade.height)) / Math.log(scale));\r\n  var pyr = new Array((scale_upto + next * 2) * 4);\r\n  pyr[0] = canvas;\r\n  pyr[0].data = pyr[0].getContext(\"2d\").getImageData(0, 0, pyr[0].width, pyr[0].height).data;\r\n  var i, j, k, x, y, q;\r\n  for (i = 1; i <= interval; i++) {\r\n    pyr[i * 4] = document.createElement(\"canvas\");\r\n    pyr[i * 4].width = Math.floor(pyr[0].width / Math.pow(scale, i));\r\n    pyr[i * 4].height = Math.floor(pyr[0].height / Math.pow(scale, i));\r\n    pyr[i * 4].getContext(\"2d\").drawImage(pyr[0], 0, 0, pyr[0].width, pyr[0].height, 0, 0, pyr[i * 4].width, pyr[i * 4].height);\r\n    pyr[i * 4].data = pyr[i * 4].getContext(\"2d\").getImageData(0, 0, pyr[i * 4].width, pyr[i * 4].height).data;\r\n  }\r\n  for (i = next; i < scale_upto + next * 2; i++) {\r\n    pyr[i * 4] = document.createElement(\"canvas\");\r\n    pyr[i * 4].width = Math.floor(pyr[i * 4 - next * 4].width / 2);\r\n    pyr[i * 4].height = Math.floor(pyr[i * 4 - next * 4].height / 2);\r\n    pyr[i * 4].getContext(\"2d\").drawImage(pyr[i * 4 - next * 4], 0, 0, pyr[i * 4 - next * 4].width, pyr[i * 4 - next * 4].height, 0, 0, pyr[i * 4].width, pyr[i * 4].height);\r\n    pyr[i * 4].data = pyr[i * 4].getContext(\"2d\").getImageData(0, 0, pyr[i * 4].width, pyr[i * 4].height).data;\r\n  }\r\n  for (i = next * 2; i < scale_upto + next * 2; i++) {\r\n    pyr[i * 4 + 1] = document.createElement(\"canvas\");\r\n    pyr[i * 4 + 1].width = Math.floor(pyr[i * 4 - next * 4].width / 2);\r\n    pyr[i * 4 + 1].height = Math.floor(pyr[i * 4 - next * 4].height / 2);\r\n    pyr[i * 4 + 1].getContext(\"2d\").drawImage(pyr[i * 4 - next * 4], 1, 0, pyr[i * 4 - next * 4].width - 1, pyr[i * 4 - next * 4].height, 0, 0, pyr[i * 4 + 1].width - 2, pyr[i * 4 + 1].height);\r\n    pyr[i * 4 + 1].data = pyr[i * 4 + 1].getContext(\"2d\").getImageData(0, 0, pyr[i * 4 + 1].width, pyr[i * 4 + 1].height).data;\r\n    pyr[i * 4 + 2] = document.createElement(\"canvas\");\r\n    pyr[i * 4 + 2].width = Math.floor(pyr[i * 4 - next * 4].width / 2);\r\n    pyr[i * 4 + 2].height = Math.floor(pyr[i * 4 - next * 4].height / 2);\r\n    pyr[i * 4 + 2].getContext(\"2d\").drawImage(pyr[i * 4 - next * 4], 0, 1, pyr[i * 4 - next * 4].width, pyr[i * 4 - next * 4].height - 1, 0, 0, pyr[i * 4 + 2].width, pyr[i * 4 + 2].height - 2);\r\n    pyr[i * 4 + 2].data = pyr[i * 4 + 2].getContext(\"2d\").getImageData(0, 0, pyr[i * 4 + 2].width, pyr[i * 4 + 2].height).data;\r\n    pyr[i * 4 + 3] = document.createElement(\"canvas\");\r\n    pyr[i * 4 + 3].width = Math.floor(pyr[i * 4 - next * 4].width / 2);\r\n    pyr[i * 4 + 3].height = Math.floor(pyr[i * 4 - next * 4].height / 2);\r\n    pyr[i * 4 + 3].getContext(\"2d\").drawImage(pyr[i * 4 - next * 4], 1, 1, pyr[i * 4 - next * 4].width - 1, pyr[i * 4 - next * 4].height - 1, 0, 0, pyr[i * 4 + 3].width - 2, pyr[i * 4 + 3].height - 2);\r\n    pyr[i * 4 + 3].data = pyr[i * 4 + 3].getContext(\"2d\").getImageData(0, 0, pyr[i * 4 + 3].width, pyr[i * 4 + 3].height).data;\r\n  }\r\n  for (j = 0; j < cascade.stage_classifier.length; j++)\r\n    cascade.stage_classifier[j].orig_feature = cascade.stage_classifier[j].feature;\r\n  var scale_x = 1, scale_y = 1;\r\n  var dx = [0, 1, 0, 1];\r\n  var dy = [0, 0, 1, 1];\r\n  var seq = [];\r\n  for (i = 0; i < scale_upto; i++) {\r\n    var qw = pyr[i * 4 + next * 8].width - Math.floor(cascade.width / 4);\r\n    var qh = pyr[i * 4 + next * 8].height - Math.floor(cascade.height / 4);\r\n    var step = [pyr[i * 4].width * 4, pyr[i * 4 + next * 4].width * 4, pyr[i * 4 + next * 8].width * 4];\r\n    var paddings = [pyr[i * 4].width * 16 - qw * 16,\r\n            pyr[i * 4 + next * 4].width * 8 - qw * 8,\r\n            pyr[i * 4 + next * 8].width * 4 - qw * 4];\r\n    for (j = 0; j < cascade.stage_classifier.length; j++) {\r\n      var orig_feature = cascade.stage_classifier[j].orig_feature;\r\n      var feature = cascade.stage_classifier[j].feature = new Array(cascade.stage_classifier[j].count);\r\n      for (k = 0; k < cascade.stage_classifier[j].count; k++) {\r\n        feature[k] = {\"size\" : orig_feature[k].size,\r\n                \"px\" : new Array(orig_feature[k].size),\r\n                \"pz\" : new Array(orig_feature[k].size),\r\n                \"nx\" : new Array(orig_feature[k].size),\r\n                \"nz\" : new Array(orig_feature[k].size)};\r\n        for (q = 0; q < orig_feature[k].size; q++) {\r\n          feature[k].px[q] = orig_feature[k].px[q] * 4 + orig_feature[k].py[q] * step[orig_feature[k].pz[q]];\r\n          feature[k].pz[q] = orig_feature[k].pz[q];\r\n          feature[k].nx[q] = orig_feature[k].nx[q] * 4 + orig_feature[k].ny[q] * step[orig_feature[k].nz[q]];\r\n          feature[k].nz[q] = orig_feature[k].nz[q];\r\n        }\r\n      }\r\n    }\r\n    for (q = 0; q < 4; q++) {\r\n      var u8 = [pyr[i * 4].data, pyr[i * 4 + next * 4].data, pyr[i * 4 + next * 8 + q].data];\r\n      var u8o = [dx[q] * 8 + dy[q] * pyr[i * 4].width * 8, dx[q] * 4 + dy[q] * pyr[i * 4 + next * 4].width * 4, 0];\r\n      for (y = 0; y < qh; y++) {\r\n        for (x = 0; x < qw; x++) {\r\n          var sum = 0;\r\n          var flag = true;\r\n          for (j = 0; j < cascade.stage_classifier.length; j++) {\r\n            sum = 0;\r\n            var alpha = cascade.stage_classifier[j].alpha;\r\n            var feature = cascade.stage_classifier[j].feature;\r\n            for (k = 0; k < cascade.stage_classifier[j].count; k++) {\r\n              var feature_k = feature[k];\r\n              var p, pmin = u8[feature_k.pz[0]][u8o[feature_k.pz[0]] + feature_k.px[0]];\r\n              var n, nmax = u8[feature_k.nz[0]][u8o[feature_k.nz[0]] + feature_k.nx[0]];\r\n              if (pmin <= nmax) {\r\n                sum += alpha[k * 2];\r\n              } else {\r\n                var f, shortcut = true;\r\n                for (f = 0; f < feature_k.size; f++) {\r\n                  if (feature_k.pz[f] >= 0) {\r\n                    p = u8[feature_k.pz[f]][u8o[feature_k.pz[f]] + feature_k.px[f]];\r\n                    if (p < pmin) {\r\n                      if (p <= nmax) {\r\n                        shortcut = false;\r\n                        break;\r\n                      }\r\n                      pmin = p;\r\n                    }\r\n                  }\r\n                  if (feature_k.nz[f] >= 0) {\r\n                    n = u8[feature_k.nz[f]][u8o[feature_k.nz[f]] + feature_k.nx[f]];\r\n                    if (n > nmax) {\r\n                      if (pmin <= n) {\r\n                        shortcut = false;\r\n                        break;\r\n                      }\r\n                      nmax = n;\r\n                    }\r\n                  }\r\n                }\r\n                sum += (shortcut) ? alpha[k * 2 + 1] : alpha[k * 2];\r\n              }\r\n            }\r\n            if (sum < cascade.stage_classifier[j].threshold) {\r\n              flag = false;\r\n              break;\r\n            }\r\n          }\r\n          if (flag) {\r\n            seq.push({\"x\" : (x * 4 + dx[q] * 2) * scale_x,\r\n                  \"y\" : (y * 4 + dy[q] * 2) * scale_y,\r\n                  \"width\" : cascade.width * scale_x,\r\n                  \"height\" : cascade.height * scale_y,\r\n                  \"neighbor\" : 1,\r\n                  \"confidence\" : sum});\r\n          }\r\n          u8o[0] += 16;\r\n          u8o[1] += 8;\r\n          u8o[2] += 4;\r\n        }\r\n        u8o[0] += paddings[0];\r\n        u8o[1] += paddings[1];\r\n        u8o[2] += paddings[2];\r\n      }\r\n    }\r\n    scale_x *= scale;\r\n    scale_y *= scale;\r\n  }\r\n  for (j = 0; j < cascade.stage_classifier.length; j++)\r\n    cascade.stage_classifier[j].feature = cascade.stage_classifier[j].orig_feature;\r\n  if (!(min_neighbors > 0))\r\n    return seq;\r\n  else {\r\n    var result = headtrackr.ccv.array_group(seq, function (r1, r2) {\r\n      var distance = Math.floor(r1.width * 0.25 + 0.5);\r\n\r\n      return r2.x <= r1.x + distance &&\r\n           r2.x >= r1.x - distance &&\r\n           r2.y <= r1.y + distance &&\r\n           r2.y >= r1.y - distance &&\r\n           r2.width <= Math.floor(r1.width * 1.5 + 0.5) &&\r\n           Math.floor(r2.width * 1.5 + 0.5) >= r1.width;\r\n    });\r\n    var ncomp = result.cat;\r\n    var idx_seq = result.index;\r\n    var comps = new Array(ncomp + 1);\r\n    for (i = 0; i < comps.length; i++)\r\n      comps[i] = {\"neighbors\" : 0,\r\n            \"x\" : 0,\r\n            \"y\" : 0,\r\n            \"width\" : 0,\r\n            \"height\" : 0,\r\n            \"confidence\" : 0};\r\n\r\n    // count number of neighbors\r\n    for(i = 0; i < seq.length; i++)\r\n    {\r\n      var r1 = seq[i];\r\n      var idx = idx_seq[i];\r\n\r\n      if (comps[idx].neighbors == 0)\r\n        comps[idx].confidence = r1.confidence;\r\n\r\n      ++comps[idx].neighbors;\r\n\r\n      comps[idx].x += r1.x;\r\n      comps[idx].y += r1.y;\r\n      comps[idx].width += r1.width;\r\n      comps[idx].height += r1.height;\r\n      comps[idx].confidence = Math.max(comps[idx].confidence, r1.confidence);\r\n    }\r\n\r\n    var seq2 = [];\r\n    // calculate average bounding box\r\n    for(i = 0; i < ncomp; i++)\r\n    {\r\n      var n = comps[i].neighbors;\r\n      if (n >= min_neighbors)\r\n        seq2.push({\"x\" : (comps[i].x * 2 + n) / (2 * n),\r\n               \"y\" : (comps[i].y * 2 + n) / (2 * n),\r\n               \"width\" : (comps[i].width * 2 + n) / (2 * n),\r\n               \"height\" : (comps[i].height * 2 + n) / (2 * n),\r\n               \"neighbors\" : comps[i].neighbors,\r\n               \"confidence\" : comps[i].confidence});\r\n    }\r\n\r\n    var result_seq = [];\r\n    // filter out small face rectangles inside large face rectangles\r\n    for(i = 0; i < seq2.length; i++)\r\n    {\r\n      var r1 = seq2[i];\r\n      var flag = true;\r\n      for(j = 0; j < seq2.length; j++)\r\n      {\r\n        var r2 = seq2[j];\r\n        var distance = Math.floor(r2.width * 0.25 + 0.5);\r\n\r\n        if(i != j &&\r\n           r1.x >= r2.x - distance &&\r\n           r1.y >= r2.y - distance &&\r\n           r1.x + r1.width <= r2.x + r2.width + distance &&\r\n           r1.y + r1.height <= r2.y + r2.height + distance &&\r\n           (r2.neighbors > Math.max(3, r1.neighbors) || r1.neighbors < 3))\r\n        {\r\n          flag = false;\r\n          break;\r\n        }\r\n      }\r\n\r\n      if(flag)\r\n        result_seq.push(r1);\r\n    }\r\n    return result_seq;\r\n  }\r\n};"]],"start1":0,"start2":0,"length1":0,"length2":14390}]],"length":14390,"saved":false}
