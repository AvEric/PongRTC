{"ts":1353966172101,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":true,"ts":1353966189386,"patch":[[{"diffs":[[1,"//CLIENT\r\n\r\n // Fallbacks for vendor-specific variables until the spec is finalized.\r\nvar PeerConnection = window.webkitRTCPeerConnection;\r\nvar URL = window.URL || window.webkitURL || window.msURL || window.oURL;\r\nvar getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;\r\n// TODO jme- dirty to remove\r\nvar pc;\r\n\r\n(function() {\r\n\r\n  var rtc;\r\n  if ('undefined' === typeof module) {\r\n    rtc = this.rtc = {};\r\n  } else {\r\n    rtc = module.exports = {};\r\n  }\r\n\r\n \r\n  // Holds a connection to the server.\r\n  rtc._socket = null;\r\n\r\n  // Holds callbacks for certain events.\r\n  rtc._events = {};\r\n\r\n  rtc.on = function(eventName, callback) {\r\n    rtc._events[eventName] = rtc._events[eventName] || [];\r\n    rtc._events[eventName].push(callback);\r\n  };\r\n\r\n  rtc.fire = function(eventName, _) {\r\n    var events = rtc._events[eventName];\r\n    var args = Array.prototype.slice.call(arguments, 1);\r\n\r\n    if (!events) {\r\n      return;\r\n    }\r\n\r\n    for (var i = 0, len = events.length; i < len; i++) {\r\n      events[i].apply(null, args);\r\n    }\r\n  };\r\n\r\n  // Holds the STUN server to use for PeerConnections.\r\n  rtc.SERVER = {iceServers:[{url:\"stun:stun.l.google.com:19302\"}]};\r\n\r\n  // Referenc e to the lone PeerConnection instance.\r\n  rtc.peerConnections = {};\r\n\r\n  // Array of known peer socket ids\r\n  rtc.connections = [];\r\n  // Stream-related variables.\r\n  rtc.streams = [];\r\n  rtc.numStreams = 0;\r\n  rtc.initializedStreams = 0;\r\n\r\n  /**\r\n   * Connects to the websocket server.\r\n   */\r\n  rtc.connect = function(server, room) {\r\n    room = room || \"\"; // by default, join a room called the blank string\r\n    rtc._socket = new WebSocket(server);\r\n\r\n    rtc._socket.onopen = function() {\r\n\r\n      rtc._socket.send(JSON.stringify({\r\n        \"eventName\": \"join_room\",\r\n        \"data\":{\r\n          \"room\": room\r\n        }\r\n      }), function(error){\r\n          if(error){console.log(error);}\r\n        });\r\n\r\n      rtc._socket.onmessage = function(msg) {\r\n        var json = JSON.parse(msg.data);\r\n        rtc.fire(json.eventName, json.data);\r\n      };\r\n\r\n      rtc._socket.onerror = function(err) {\r\n        console.log('onerror');\r\n        console.log(err);\r\n      };\r\n\r\n      rtc._socket.onclose = function(data) {\r\n        rtc.fire('disconnect stream', rtc._socket.id);\r\n        delete rtc.peerConnections[rtc._socket.id];\r\n      };\r\n\r\n      rtc.on('get_peers', function(data) {\r\n        rtc.connections = data.connections;\r\n        // fire connections event and pass peers\r\n        rtc.fire('connections', rtc.connections);\r\n      });\r\n\r\n      rtc.on('receive_ice_candidate', function(data) {\r\n        var candidate = new RTCIceCandidate(data);\r\n        rtc.peerConnections[data.socketId].addIceCandidate(candidate);\r\n        \r\n        rtc.fire('receive ice candidate', candidate);\r\n      });\r\n\r\n      rtc.on('new_peer_connected', function(data) {\r\n        rtc.connections.push(data.socketId);\r\n\r\n        var pc = rtc.createPeerConnection(data.socketId);\r\n        for (var i = 0; i < rtc.streams.length; i++) {\r\n          var stream = rtc.streams[i];\r\n          pc.addStream(stream);\r\n        }\r\n      });\r\n\r\n      rtc.on('remove_peer_connected', function(data) {  \r\n        rtc.fire('disconnect stream', data.socketId);\r\n        delete rtc.peerConnections[data.socketId];\r\n      });\r\n\r\n      rtc.on('receive_offer', function(data) {\r\n        rtc.receiveOffer(data.socketId, data.sdp);\r\n        rtc.fire('receive offer', data);\r\n      });\r\n\r\n      rtc.on('receive_answer', function(data) {\r\n        rtc.receiveAnswer(data.socketId, data.sdp);\r\n        rtc.fire('receive answer', data);\r\n      });\r\n\r\n      rtc.fire('connect');\r\n    };\r\n  };\r\n\r\n\r\n  rtc.sendOffers = function() {\r\n    for (var i = 0, len = rtc.connections.length; i < len; i++) {\r\n      var socketId = rtc.connections[i];\r\n      rtc.sendOffer(socketId);\r\n    }\r\n  }\r\n\r\n  rtc.onClose = function(data) {\r\n    rtc.on('close_stream', function() {\r\n      rtc.fire('close_stream', data);\r\n    });\r\n  }\r\n\r\n  rtc.createPeerConnections = function() {\r\n    for (var i = 0; i < rtc.connections.length; i++) {\r\n      rtc.createPeerConnection(rtc.connections[i]);\r\n    }\r\n  };\r\n\r\n  rtc.createPeerConnection = function(id) {\r\n    console.log('createPeerConnection');\r\n    var pc = rtc.peerConnections[id] = new PeerConnection(rtc.SERVER); \r\n    pc.onicecandidate = function(event) {\r\n      if (event.candidate) {\r\n        rtc._socket.send(JSON.stringify({\r\n          \"eventName\": \"send_ice_candidate\",\r\n          \"data\": {\r\n            \"candidate\": event.candidate.candidate,\r\n            \"socketId\": id\r\n          }\r\n        }), function(error){\r\n          if(error){console.log(error);}\r\n        });\r\n      }\r\n      rtc.fire('ice candidate', event.candidate);\r\n    };\r\n\r\n    pc.onopen = function() {\r\n      // TODO: Finalize this API\r\n      rtc.fire('peer connection opened');\r\n    };\r\n\r\n    pc.onaddstream = function(event) {\r\n      // TODO: Finalize this API\r\n      rtc.fire('add remote stream', event.stream, id);\r\n    };\r\n    return pc;\r\n  };\r\n\r\n  rtc.sendOffer = function(socketId) {\r\n    var pc = rtc.peerConnections[socketId];\r\n    // TODO: Abstract away video: true, audio: true for offers\r\n    pc.createOffer( function(session_description) {\r\n      pc.setLocalDescription(session_description);\r\n      rtc._socket.send(JSON.stringify({\r\n        \"eventName\": \"send_offer\",\r\n        \"data\": {\r\n          \"socketId\": socketId,\r\n          \"sdp\": session_description\r\n        }\r\n      }), function(error){\r\n            if(error){console.log(error);}\r\n          });\r\n    });\r\n  };\r\n\r\n\r\n  rtc.receiveOffer = function(socketId, sdp) {\r\n    var pc = rtc.peerConnections[socketId];\r\n    pc.setRemoteDescription(new RTCSessionDescription(sdp));\r\n    rtc.sendAnswer(socketId);\r\n  };\r\n\r\n\r\n  rtc.sendAnswer = function(socketId) {\r\n    var pc = rtc.peerConnections[socketId];\r\n    // TODO: Abstract away video: true, audio: true for answers\r\n      pc.createAnswer( function(session_description) {\r\n      pc.setLocalDescription(session_description);\r\n      rtc._socket.send(JSON.stringify({\r\n        \"eventName\": \"send_answer\",\r\n        \"data\":{\r\n          \"socketId\": socketId,\r\n          \"sdp\": session_description\r\n        }\r\n      }), function(error){\r\n            if(error){console.log(error);}\r\n          });\r\n    });\r\n  };\r\n\r\n  rtc.receiveAnswer = function(socketId, sdp) {\r\n    var pc = rtc.peerConnections[socketId];\r\n    pc.setRemoteDescription(new RTCSessionDescription(sdp));\r\n  };\r\n\r\n\r\n  rtc.createStream = function(opt, onSuccess, onFail) {\r\n    var options;\r\n    onSuccess = onSuccess ||\r\n    function() {};\r\n    onFail = onFail ||\r\n    function() {};\r\n\r\n    if(opt.audio && opt.video){\r\n      options = {\r\n        video: true,\r\n        audio: true\r\n      };\r\n    }else if(opt.video){\r\n      options = {\r\n        video: true,\r\n        audio: false\r\n      };\r\n    }else if(opt.audio){\r\n      options = {\r\n        video: false,\r\n        audio: true\r\n      };\r\n    }else {\r\n      options = {\r\n        video: false,\r\n        audio: false\r\n      };\r\n    }\r\n\r\n    if (getUserMedia) {\r\n      rtc.numStreams++;\r\n      getUserMedia.call(navigator, options, function(stream) {\r\n        \r\n        rtc.streams.push(stream);\r\n        rtc.initializedStreams++;\r\n        onSuccess(stream);\r\n        if (rtc.initializedStreams === rtc.numStreams) {\r\n          rtc.fire('ready');\r\n        }\r\n      }, function() {\r\n        alert(\"Could not connect stream.\");\r\n        onFail();\r\n      });\r\n    } else {\r\n      alert('webRTC is not yet supported in this browser.');\r\n    }\r\n  }\r\n\r\n\r\n  rtc.addStreams = function() {\r\n    for (var i = 0; i < rtc.streams.length; i++) {\r\n      var stream = rtc.streams[i];\r\n      for (var connection in rtc.peerConnections) {\r\n        rtc.peerConnections[connection].addStream(stream);\r\n      }\r\n    }\r\n  };\r\n\r\n\r\n  rtc.attachStream = function(stream, domId) {\r\n    document.getElementById(domId).src = URL.createObjectURL(stream);\r\n  };\r\n\r\n  rtc.on('ready', function() {\r\n    rtc.createPeerConnections();\r\n    rtc.addStreams();\r\n    rtc.sendOffers();\r\n  });\r\n\r\n}).call(this);"]],"start1":0,"start2":0,"length1":0,"length2":8113}]],"length":8113,"saved":false}
