{"ts":1354729133008,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"// This THREEx helper makes it easy to handle the fullscreen API\n// * it hides the prefix for each browser\n// * it hides the little discrepencies of the various vendor API\n// * at the time of this writing (nov 2011) it is available in \n//   [firefox nightly](http://blog.pearce.org.nz/2011/11/firefoxs-html-full-screen-api-enabled.html),\n//   [webkit nightly](http://peter.sh/2011/01/javascript-full-screen-api-navigation-timing-and-repeating-css-gradients/) and\n//   [chrome stable](http://updates.html5rocks.com/2011/10/Let-Your-Content-Do-the-Talking-Fullscreen-API).\n\n// # Code\n\n/** @namespace */\nvar THREEx\t\t= THREEx \t\t|| {};\nTHREEx.FullScreen\t= THREEx.FullScreen\t|| {};\n\n/**\n * test if it is possible to have fullscreen\n * \n * @returns {Boolean} true if fullscreen API is available, false otherwise\n*/\nTHREEx.FullScreen.available\t= function()\n{\n\treturn this._hasWebkitFullScreen || this._hasMozFullScreen;\n}\n\n/**\n * test if fullscreen is currently activated\n * \n * @returns {Boolean} true if fullscreen is currently activated, false otherwise\n*/\nTHREEx.FullScreen.activated\t= function()\n{\n\tif( this._hasWebkitFullScreen ){\n\t\treturn document.webkitIsFullScreen;\n\t}else if( this._hasMozFullScreen ){\n\t\treturn document.mozFullScreen;\n\t}else{\n\t\tconsole.assert(false);\n\t}\n}\n\n/**\n * Request fullscreen on a given element\n * @param {DomElement} element to make fullscreen. optional. default to document.body\n*/\nTHREEx.FullScreen.request\t= function(element)\n{\n\telement\t= element\t|| document.body;\n\tif( this._hasWebkitFullScreen ){\n\t\telement.webkitRequestFullScreen(Element.ALLOW_KEYBOARD_INPUT);\n\t}else if( this._hasMozFullScreen ){\n\t\telement.mozRequestFullScreen();\n\t}else{\n\t\tconsole.assert(false);\n\t}\n}\n\n/**\n * Cancel fullscreen\n*/\nTHREEx.FullScreen.cancel\t= function()\n{\n\tif( this._hasWebkitFullScreen ){\n\t\tdocument.webkitCancelFullScreen();\n\t}else if( this._hasMozFullScreen ){\n\t\tdocument.mozCancelFullScreen();\n\t}else{\n\t\tconsole.assert(false);\n\t}\n}\n\n// internal functions to know which fullscreen API implementation is available\nTHREEx.FullScreen._hasWebkitFullScreen\t= 'webkitCancelFullScreen' in document\t? true : false;\t\nTHREEx.FullScreen._hasMozFullScreen\t= 'mozCancelFullScreen' in document\t? true : false;\t\n\n/**\n * Bind a key to renderer screenshot\n * usage: THREEx.FullScreen.bindKey({ charCode : 'a'.charCodeAt(0) }); \n*/\nTHREEx.FullScreen.bindKey\t= function(opts){\n\topts\t\t= opts\t\t|| {};\n\tvar charCode\t= opts.charCode\t|| 'f'.charCodeAt(0);\n\tvar dblclick\t= opts.dblclick !== undefined ? opts.dblclick : false;\n\tvar element\t= opts.element\n\n\tvar toggle\t= function(){\n\t\tif( THREEx.FullScreen.activated() ){\n\t\t\tTHREEx.FullScreen.cancel();\n\t\t}else{\n\t\t\tTHREEx.FullScreen.request(element);\n\t\t}\t\t\n\t}\n\n\tvar onKeyPress\t= function(event){\n\t\tif( event.which !== charCode )\treturn;\n\t\ttoggle();\n\t}.bind(this);\n\n\tdocument.addEventListener('keypress', onKeyPress, false);\n\n\tdblclick && document.addEventListener('dblclick', toggle, false);\n\n\treturn {\n\t\tunbind\t: function(){\n\t\t\tdocument.removeEventListener('keypress', onKeyPress, false);\n\t\t\tdblclick && document.removeEventListener('dblclick', toggle, false);\n\t\t}\n\t};\n}\n"]],"start1":0,"start2":0,"length1":0,"length2":3114}]],"length":3114}
