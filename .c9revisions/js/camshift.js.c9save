{"ts":1354048682745,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":true,"ts":1354048683759,"patch":[[{"diffs":[[1,"/**\r\n * camshift object tracker\r\n *\r\n * ported with some optimizations from actionscript3 library FaceIt:\r\n *     http://www.mukimuki.fr/flashblog/2009/06/18/camshift-going-to-the-source/\r\n *\t http://www.libspark.org/browser/as3/FaceIt\r\n * some explanation of algorithm here : \r\n *\t http://www.cognotics.com/opencv/servo_2007_series/part_3/sidebar.html\r\n *\r\n * usage:\r\n *\t // create a new tracker\r\n *\t var cstracker = new headtrackr.camshift.Tracker();\r\n *\t // initialize it with a canvas, and a rectangle around the object on the canvas we'd like to track\r\n *\t cstracker.initTracker(some_canvas, new headtrackr.camshift.Rectangle(x,y,w,h));\r\n *\t // find object in same or some other canvas\r\n *\t cstracker.track(some_canvas);\r\n *\t // get position of found object\r\n *\t var currentPos = cstracker.getTrackObj();\r\n *\t currentPos.x // x-coordinate of center of object on canvas \r\n *\t currentPos.y // y-coordinate of center of object on canvas \r\n *\t currentPos.width // width of object\r\n *\t currentPos.height // heigh of object\r\n *\t currentPos.angle // angle of object in radians\r\n *\r\n * @author Benjamin Jung / jungbenj@gmail.com\r\n * @author auduno / github.com/auduno\r\n *\r\n * License of original actionscript code:\r\n *\r\n * Copyright (C)2009 Benjamin Jung\r\n * \r\n * Licensed under the MIT License\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n *\r\n */\r\n\r\nheadtrackr.camshift = {};\r\n\r\n/**\r\n * RGB histogram\r\n *\r\n * @constructor\r\n */\r\nheadtrackr.camshift.Histogram = function(imgdata) {\r\n\r\n  this.size = 4096;\r\n  \r\n  var bins = [];\r\n  var i, x, r, g, b, il;\r\n  \r\n  //initialize bins\r\n  for (i = 0; i < this.size; i++) {\r\n    bins.push(0);\r\n  }\r\n  \r\n  //add histogram data\r\n  for (x = 0, il = imgdata.length;x < il; x += 4) {\r\n    r = imgdata[x+0] >> 4; // round down to bins of 16\r\n    g = imgdata[x+1] >> 4;\r\n    b = imgdata[x+2] >> 4;\r\n    bins[256 * r + 16 * g + b] += 1;\r\n  }\r\n  \r\n  this.getBin = function( index ) {\r\n    return bins[index];\r\n  }\r\n};\r\n\r\n/**\r\n * moments object\r\n *\r\n * @constructor\r\n */\r\nheadtrackr.camshift.Moments = function(data, x, y, w, h, second) {\r\n  \r\n  this.m00 = 0;\r\n  this.m01 = 0;\r\n  this.m10 = 0;\r\n  this.m11 = 0;\r\n  this.m02 = 0;\r\n  this.m20 = 0;\r\n  \r\n  var i, j, val, vx, vy;\r\n  var a = [];\r\n  for (i = x; i < w; i++) {\r\n    a = data[i];\r\n    vx = i-x;\r\n    \r\n    for (j = y; j < h; j++) {\r\n      val = a[j];\r\n      \r\n      vy = j-y;\r\n      this.m00 += val;\r\n      this.m01 += vy * val;\r\n      this.m10 += vx * val;\r\n      if (second) {\r\n        this.m11 += vx * vy * val;\r\n        this.m02 += vy * vy * val;\r\n        this.m20 += vx * vx * val;\r\n      }\r\n    }\r\n  }\r\n  \r\n  this.invM00 = 1 / this.m00;\r\n  this.xc = this.m10 * this.invM00;\r\n  this.yc = this.m01 * this.invM00;\r\n  this.mu00 = this.m00;\r\n  this.mu01 = 0;\r\n  this.mu10 = 0;\r\n  if (second) {\r\n    this.mu20 = this.m20 - this.m10 * this.xc;\r\n    this.mu02 = this.m02 - this.m01 * this.yc;\r\n    this.mu11 = this.m11 - this.m01 * this.xc;\r\n  }\r\n};\r\n\r\n/**\r\n * rectangle object\r\n *\r\n * @constructor\r\n */\r\nheadtrackr.camshift.Rectangle = function(x,y,w,h) {\r\n  this.x = x;\r\n  this.y = y;\r\n  this.width = w;\r\n  this.height = h;\r\n  \r\n  this.clone = function() {\r\n    var c = new headtrackr.camshift.Rectangle();\r\n    c.height = this.height;\r\n    c.width = this.width;\r\n    c.x = this.x;\r\n    c.y = this.y;\r\n    return c;\r\n  }\r\n};\r\n\r\n/**\r\n * Tracker object\r\n *\r\n * @constructor\r\n */\r\nheadtrackr.camshift.Tracker = function(params) {\r\n  \r\n  if (params === undefined) params = {};\r\n  if (params.calcAngles === undefined) params.calcAngles = true;\r\n  \r\n  var _modelHist,\r\n    _curHist, //current histogram\r\n    _pdf, // pixel probability data for current searchwindow\r\n    _searchWindow, // rectangle where we are searching\r\n    _trackObj, // object holding data about where current tracked object is\r\n    _canvasCtx, // canvas context for initial canvas\r\n    _canvasw, // canvas width for tracking canvas\r\n    _canvash; // canvas height for tracking canvas\r\n  \r\n  this.getSearchWindow = function() {\r\n    // return the search window used by the camshift algorithm in the current analysed image\r\n    return _searchWindow.clone();\r\n  }\r\n  \r\n  this.getTrackObj = function() {\r\n    // return a trackobj with the size and orientation of the tracked object in the current analysed image\r\n    return _trackObj.clone();\r\n  }\r\n  \r\n  this.getPdf = function() {\r\n    // returns a nested array representing color\r\n    return _pdf;\r\n  }\r\n  \r\n  this.getBackProjectionImg = function() {\r\n    // return imgData representing pixel color probabilities, which can then be put into canvas\r\n    var weights = _pdf;\r\n    var w = _canvasw;\r\n    var h = _canvash;\r\n    var img = _canvasCtx.createImageData(w, h);\r\n    var imgData = img.data;\r\n    var x, y, val;\r\n    for (x = 0; x < w; x++) {\r\n      for (y = 0; y < h; y++) {\r\n        val = Math.floor(255 * weights[x][y]);\r\n        pos = ((y*w)+x)*4;\r\n        imgData[pos] = val;\r\n        imgData[pos+1] = val;\r\n        imgData[pos+2] = val;\r\n        imgData[pos+3] = 255;\r\n      }\r\n    }\r\n    return img;\r\n  }\r\n  \r\n  this.initTracker = function(canvas, trackedArea) {\r\n    // initialize the tracker with canvas and the area of interest as a rectangle\r\n    \r\n    _canvasCtx = canvas.getContext(\"2d\");\r\n    var taw = trackedArea.width;\r\n    var tah = trackedArea.height;\r\n    var tax = trackedArea.x;\r\n    var tay = trackedArea.y;\r\n    var trackedImg = _canvasCtx.getImageData(tax, tay, taw, tah);\r\n    \r\n    _modelHist = new headtrackr.camshift.Histogram(trackedImg.data);\r\n    _searchWindow = trackedArea.clone();\r\n    _trackObj = new headtrackr.camshift.TrackObj();\r\n  }\r\n  \r\n  this.track = function(canvas) {\r\n    // search the tracked object by camshift\r\n    var canvasCtx = canvas.getContext(\"2d\");\r\n    _canvash = canvas.height;\r\n    _canvasw = canvas.width;\r\n    var imgData = canvasCtx.getImageData(0, 0, canvas.width, canvas.height);\r\n    if (imgData.width != 0 && imgData.height != 0) camShift(imgData);\r\n  }\r\n  \r\n  function camShift(frame) {\r\n\r\n    var w = frame.width;\r\n    var h = frame.height;\r\n    \r\n    // search location\r\n    var m = meanShift(frame);\r\n    \r\n    var a = m.mu20 * m.invM00;\r\n    var c = m.mu02 * m.invM00;\r\n    \r\n    if (params.calcAngles) {\r\n      // use moments to find size and orientation\r\n      var b = m.mu11 * m.invM00;\r\n      var d = a + c;\r\n      var e = Math.sqrt((4*b * b) + ((a - c) * (a - c)));\r\n      \r\n      // update object position\r\n      _trackObj.width = Math.sqrt((d - e)*0.5) << 2;\r\n      _trackObj.height = Math.sqrt((d + e)*0.5) << 2;\r\n      _trackObj.angle = Math.atan2(2 * b, a - c + e);\r\n      \r\n      // to have a positive counter clockwise angle\r\n      if (_trackObj.angle < 0) _trackObj.angle = _trackObj.angle + Math.PI;\r\n    } else {\r\n      _trackObj.width = Math.sqrt(a) << 2;\r\n      _trackObj.height = Math.sqrt(c) << 2;\r\n      _trackObj.angle = Math.PI/2;\r\n    }\r\n    \r\n    // check if tracked object is into the limit\r\n    _trackObj.x = Math.floor(Math.max(0, Math.min(_searchWindow.x + _searchWindow.width/2, w)));\r\n    _trackObj.y = Math.floor(Math.max(0, Math.min(_searchWindow.y + _searchWindow.height/2, h)));\r\n    \r\n    // new search window size\r\n    _searchWindow.width = Math.floor(1.1 * _trackObj.width);\r\n    _searchWindow.height = Math.floor(1.1 * _trackObj.height);\r\n  }\r\n  \r\n  function meanShift(frame) {\r\n    // mean-shift algorithm on frame\r\n    \r\n    var w = frame.width;\r\n    var h = frame.height;\r\n    var imgData = frame.data;\r\n    \r\n    var curHist = new headtrackr.camshift.Histogram(imgData);\r\n    \r\n    var weights = getWeights(_modelHist, curHist);\r\n    \r\n    // Color probabilities distributions\r\n    _pdf = getBackProjectionData(imgData, frame.width, frame.height, weights);\r\n    \r\n    var m, x, y, i, wadx, wady, wadw, wadh;\r\n    \r\n    var meanShiftIterations = 10; // maximum number of iterations\r\n    \r\n    // store initial searchwindow\r\n    var prevx = _searchWindow.x;\r\n    var prevy = _searchWindow.y;\r\n    \r\n    // Locate by iteration the maximum of density into the probability distributions\r\n    for (i = 0;i < meanShiftIterations; i++) {\r\n      // get searchwindow from _pdf:\r\n      wadx = Math.max(_searchWindow.x,0);\r\n      wady = Math.max(_searchWindow.y,0);\r\n      wadw = Math.min(wadx + _searchWindow.width,w);\r\n      wadh = Math.min(wady + _searchWindow.height,h);\r\n      \r\n      m = new headtrackr.camshift.Moments(_pdf, wadx, wady, wadw, wadh, (i == meanShiftIterations -1));\r\n      x = m.xc;\r\n      y = m.yc;\r\n      \r\n      _searchWindow.x += ((x - _searchWindow.width/2) >> 0);\r\n      _searchWindow.y += ((y - _searchWindow.height/2) >> 0);\r\n      \r\n      // if we have reached maximum density, get second moments and stop iterations\r\n      if (_searchWindow.x == prevx && _searchWindow.y == prevy) {\r\n        m = new headtrackr.camshift.Moments(_pdf, wadx, wady, wadw, wadh, true);\r\n        break;\r\n      } else {\r\n        prevx = _searchWindow.x;\r\n        prevy = _searchWindow.y;\r\n      }\r\n    }\r\n    \r\n    _searchWindow.x = Math.max(0, Math.min(_searchWindow.x, w));\r\n    _searchWindow.y = Math.max(0, Math.min(_searchWindow.y, h));\r\n    \r\n    return m;\r\n  }\r\n  \r\n  function getWeights(mh, ch) {\r\n    // Return an array of the probabilities of each histogram color bins\r\n    var weights = [];\r\n    var p;\r\n    \r\n    // iterate over the entire histogram and compare\r\n    for (var i = 0; i < 4096; i++) {\r\n      if (ch.getBin(i) != 0) {\r\n        p = Math.min(mh.getBin(i)/ch.getBin(i), 1);\r\n      } else {\r\n        p = 0;\r\n      }\r\n      weights.push(p);\r\n    }\r\n    \r\n    return weights;\r\n  }\r\n  \r\n  function getBackProjectionData(imgData, idw, idh, weights, hsMap) {\r\n    // Return a matrix representing pixel color probabilities\r\n    var data = [];\r\n    var x,y,r,g,b,pos;\r\n    var a = [];\r\n    \r\n    // TODO : we could use typed arrays here\r\n    // but we should then do a compatibilitycheck\r\n    \r\n    for (x = 0; x < idw; x++) {\r\n      a = [];\r\n      for (y = 0; y < idh; y++) {\r\n        pos = ((y*idw)+x)*4;\r\n        r = imgData[pos] >> 4;\r\n        g = imgData[pos+1] >> 4;\r\n        b = imgData[pos+2] >> 4;\r\n        a.push(weights[256 * r + 16 * g + b]);\r\n      }\r\n      data[x] = a;\r\n    }\r\n    return data;\r\n  }\r\n};\r\n\r\n/**\r\n * Object returned by tracker\r\n *  note that x,y is the point of the center of the tracker\r\n *\r\n * @constructor\r\n */\r\nheadtrackr.camshift.TrackObj = function() {\r\n  this.height = 0;\r\n  this.width = 0;\r\n  this.angle = 0;\r\n  this.x = 0; \r\n  this.y = 0;\r\n  \r\n  this.clone = function() {\r\n    var c = new headtrackr.camshift.TrackObj();\r\n    c.height = this.height;\r\n    c.width = this.width;\r\n    c.angle = this.angle;\r\n    c.x = this.x;\r\n    c.y = this.y;\r\n    return c;\r\n  }\r\n};"]],"start1":0,"start2":0,"length1":0,"length2":11631}]],"length":11631,"saved":false}
