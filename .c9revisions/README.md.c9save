{"ts":1353825784757,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"PongRTC\n======="]],"start1":0,"start2":0,"length1":0,"length2":15}]],"length":15}
{"contributors":[],"silentsave":false,"ts":1353825809814,"patch":[[{"diffs":[[0,"gRTC\n======="],[1,"\n\nhttp://www.shinydemos.com/facekat/"]],"start1":3,"start2":3,"length1":12,"length2":48}]],"length":51,"saved":false}
{"contributors":[],"silentsave":true,"ts":1353968169574,"patch":[[{"diffs":[[0,"facekat/"],[1,"\n\nview-source:http://jeromeetienne.github.com/webglmeeting/"]],"start1":43,"start2":43,"length1":8,"length2":67}]],"length":110,"saved":false}
{"contributors":[],"silentsave":true,"ts":1354029917810,"patch":[[{"diffs":[[0,"meeting/"],[1,"\n\n// debut adaptr.js\n\nvar RTCPeerConnection = null;\nvar getUserMedia = null;\nvar attachMediaStream = null;\n\nif (navigator.mozGetUserMedia) {\n  console.log(\"This appears to be Firefox\");\n\n  // The RTCPeerConnection object.\n  RTCPeerConnection = mozRTCPeerConnection;\n\n  // Get UserMedia (only difference is the prefix).\n  // Code from Adam Barth.\n  getUserMedia = navigator.mozGetUserMedia.bind(navigator);\n\n  // Attach a media stream to an element.\n  attachMediaStream = function(element, stream) {\n    console.log(\"Attaching media stream\");\n    element.mozSrcObject = stream;\n    element.play();\n  };\n} else if (navigator.webkitGetUserMedia) {\n  console.log(\"This appears to be Chrome\");\n\n  // The RTCPeerConnection object.\n  RTCPeerConnection = webkitRTCPeerConnection;\n  \n  // Get UserMedia (only difference is the prefix).\n  // Code from Adam Barth.\n  getUserMedia = navigator.webkitGetUserMedia.bind(navigator);\n\n  // Attach a media stream to an element.\n  attachMediaStream = function(element, stream) {\n    element.src = webkitURL.createObjectURL(stream);\n  };\n} else {\n  console.log(\"Browser does not appear to be WebRTC-capable\");\n}\n// fin adapter.js\n\n\n\nvar localVideo;\nvar localStream;\n\n\nlocalVideo = document.createElement('video');\nlocalVideo.width = 320;\nlocalVideo.height    = 240;\nlocalVideo.autoplay  = true;\n\ndoGetUserMedia();\n\nfunction doGetUserMedia() {\n    // Call into getUserMedia via the polyfill (adapter.js).\n    try {\n      getUserMedia({'audio':true, 'video':true}, onUserMediaSuccess,\n                   onUserMediaError);\n      console.log(\"Requested access to local media with new syntax.\");\n    } catch (e) {\n      alert(\"getUserMedia() failed. Is this a WebRTC capable browser?\");\n      console.log(\"getUserMedia failed with exception: \" + e.message);\n    }\n  }\n\n  function onUserMediaSuccess(stream) {\n    console.log(\"User has granted access to local media.\");\n    // Call the polyfill wrapper to attach the media stream to this element.\n    attachMediaStream(localVideo, stream);\n    localVideo.style.opacity = 1;\n    localStream = stream;\n    // Caller creates PeerConnection.\n    //if (initiator) maybeStart();\n\n    var videoTexture = new THREE.Texture( localVideo );\n    var material    = new THREE.MeshLambertMaterial({\n        map : videoTexture\n    });\n  }\n\n  function onUserMediaError(error) {\n    console.log(\"Failed to get access to local media. Error code was \" + error.code);\n    alert(\"Failed to get access to local media. Error code was \" + error.code + \".\");\n  }\n\n// ON UPDATE:\n\nif( localVideo.readyState === localVideo.HAVE_ENOUGH_DATA ){\n    videoTexture.needsUpdate = true;\n}\n\n\n//limks:\nview-source:https://apprtc.appspot.com/?r=35993099\nhttp://learningthreejs.com/blog/2012/02/07/live-video-in-webgl/"]],"start1":102,"start2":102,"length1":8,"length2":2761}]],"length":2863,"saved":false}
{"ts":1354032059301,"patch":[[{"diffs":[[0,"}\n\n\n//li"],[-1,"m"],[1,"n"],[0,"ks:\nview"]],"start1":2736,"start2":2736,"length1":17,"length2":17}]],"length":2863,"saved":false}
{"ts":1354032063497,"patch":[[{"diffs":[[0,"ing/"],[-1,"\n\n// debut adaptr.js\n\nvar RTCPeerConnection = null;\nvar getUserMedia = null;\nvar attachMediaStream = null;\n\nif (navigator.mozGetUserMedia) {\n  console.log(\"This appears to be Firefox\");\n\n  // The RTCPeerConnection object.\n  RTCPeerConnection = mozRTCPeerConnection;\n\n  // Get UserMedia (only difference is the prefix).\n  // Code from Adam Barth.\n  getUserMedia = navigator.mozGetUserMedia.bind(navigator);\n\n  // Attach a media stream to an element.\n  attachMediaStream = function(element, stream) {\n    console.log(\"Attaching media stream\");\n    element.mozSrcObject = stream;\n    element.play();\n  };\n} else if (navigator.webkitGetUserMedia) {\n  console.log(\"This appears to be Chrome\");\n\n  // The RTCPeerConnection object.\n  RTCPeerConnection = webkitRTCPeerConnection;\n  \n  // Get UserMedia (only difference is the prefix).\n  // Code from Adam Barth.\n  getUserMedia = navigator.webkitGetUserMedia.bind(navigator);\n\n  // Attach a media stream to an element.\n  attachMediaStream = function(element, stream) {\n    element.src = webkitURL.createObjectURL(stream);\n  };\n} else {\n  console.log(\"Browser does not appear to be WebRTC-capable\");\n}\n// fin adapter.js\n\n\n\nvar localVideo;\nvar localStream;\n\n\nlocalVideo = document.createElement('video');\nlocalVideo.width = 320;\nlocalVideo.height    = 240;\nlocalVideo.autoplay  = true;\n\ndoGetUserMedia();\n\nfunction doGetUserMedia() {\n    // Call into getUserMedia via the polyfill (adapter.js).\n    try {\n      getUserMedia({'audio':true, 'video':true}, onUserMediaSuccess,\n                   onUserMediaError);\n      console.log(\"Requested access to local media with new syntax.\");\n    } catch (e) {\n      alert(\"getUserMedia() failed. Is this a WebRTC capable browser?\");\n      console.log(\"getUserMedia failed with exception: \" + e.message);\n    }\n  }\n\n  function onUserMediaSuccess(stream) {\n    console.log(\"User has granted access to local media.\");\n    // Call the polyfill wrapper to attach the media stream to this element.\n    attachMediaStream(localVideo, stream);\n    localVideo.style.opacity = 1;\n    localStream = stream;\n    // Caller creates PeerConnection.\n    //if (initiator) maybeStart();\n\n    var videoTexture = new THREE.Texture( localVideo );\n    var material    = new THREE.MeshLambertMaterial({\n        map : videoTexture\n    });\n  }\n\n  function onUserMediaError(error) {\n    console.log(\"Failed to get access to local media. Error code was \" + error.code);\n    alert(\"Failed to get access to local media. Error code was \" + error.code + \".\");\n  }\n\n// ON UPDATE:\n\nif( localVideo.readyState === localVideo.HAVE_ENOUGH_DATA ){\n    videoTexture.needsUpdate = true;\n}\n\n"],[0,"\n//l"]],"start1":106,"start2":106,"length1":2637,"length2":8}]],"length":234,"saved":false}
{"contributors":[],"silentsave":false,"ts":1354055923004,"patch":[[{"diffs":[[0,"===="],[-1,"\n\nhttp://www.shinydemos.com/facekat/\n\nview-source:http://jeromeetienne.github.com/webglmeeting/\n//links:\nview-source:https://apprtc.appspot.com/?r=35993099\nhttp://learningthreejs.com/blog/2012/02/07/live-video-in-webgl/"]],"start1":11,"start2":11,"length1":223,"length2":4}]],"length":15,"saved":false}
{"contributors":[],"silentsave":true,"ts":1354130545405,"patch":[[{"diffs":[[0,"gRTC\n======="],[1,"\n"]],"start1":3,"start2":3,"length1":12,"length2":13}]],"length":16,"saved":false}
{"ts":1354130546817,"patch":[[{"diffs":[[0,"=======\n"],[1,"http://blog.gingertech.net/2012/06/04/video-conferencing-in-html5-webrtc-via-web-sockets/"]],"start1":8,"start2":8,"length1":8,"length2":97}]],"length":105,"saved":false}
{"contributors":[],"silentsave":true,"ts":1354545248020,"patch":[[{"diffs":[[0,"sockets/"],[1,"\n\n"]],"start1":97,"start2":97,"length1":8,"length2":10}]],"length":107,"saved":false}
{"ts":1354545248873,"patch":[[{"diffs":[[0,"ckets/\n\n"],[1,"http://inear.se/plasmaball/"]],"start1":99,"start2":99,"length1":8,"length2":35}]],"length":134,"saved":false}
{"ts":1354545255599,"patch":[[{"diffs":[[0,"===\n"],[-1,"http://blog.gingertech.net/2012/06/04/video-conferencing-in-html5-webrtc-via-web-sockets/\n\n"],[0,"http"]],"start1":12,"start2":12,"length1":99,"length2":8}]],"length":43,"saved":false}
